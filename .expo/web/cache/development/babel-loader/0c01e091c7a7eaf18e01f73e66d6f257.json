{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCellTranslate = void 0;\n\nvar react_native_reanimated_1 = require(\"react-native-reanimated\");\n\nvar animatedValueContext_1 = require(\"../context/animatedValueContext\");\n\nvar refContext_1 = require(\"../context/refContext\");\n\nvar procs_1 = require(\"../procs\");\n\nvar useSpring_1 = require(\"./useSpring\");\n\nvar useNode_1 = require(\"../hooks/useNode\");\n\nvar draggableFlatListContext_1 = require(\"../context/draggableFlatListContext\");\n\nfunction useCellTranslate(_a) {\n  var cellIndex = _a.cellIndex,\n      cellSize = _a.cellSize,\n      cellOffset = _a.cellOffset;\n\n  var _b = animatedValueContext_1.useAnimatedValues(),\n      activeIndexAnim = _b.activeIndexAnim,\n      activeCellSize = _b.activeCellSize,\n      hoverAnim = _b.hoverAnim,\n      scrollOffset = _b.scrollOffset,\n      spacerIndexAnim = _b.spacerIndexAnim,\n      placeholderOffset = _b.placeholderOffset,\n      isDraggingCell = _b.isDraggingCell,\n      resetTouchedCell = _b.resetTouchedCell,\n      disabled = _b.disabled;\n\n  var animationConfigRef = refContext_1.useRefs().animationConfigRef;\n  var onDragEnd = draggableFlatListContext_1.useDraggableFlatListContext().onDragEnd;\n  var cellSpring = useSpring_1.useSpring({\n    config: animationConfigRef.current\n  });\n  var clock = cellSpring.clock,\n      state = cellSpring.state,\n      config = cellSpring.config;\n  var isAfterActive = react_native_reanimated_1.useValue(0);\n  var isClockRunning = useNode_1.useNode(react_native_reanimated_1.clockRunning(clock));\n  var runSpring = useNode_1.useNode(procs_1.springFill(clock, state, config));\n  var cellHoverOffset = useNode_1.useNode(react_native_reanimated_1.add(hoverAnim, scrollOffset));\n  var onFinished = useNode_1.useNode(react_native_reanimated_1.cond(isClockRunning, [react_native_reanimated_1.stopClock(clock), react_native_reanimated_1.cond(react_native_reanimated_1.eq(cellIndex, activeIndexAnim), [resetTouchedCell, react_native_reanimated_1.call([activeIndexAnim, spacerIndexAnim], onDragEnd)])]));\n  var prevTrans = react_native_reanimated_1.useValue(0);\n  var prevSpacerIndex = react_native_reanimated_1.useValue(-1);\n  var prevIsDraggingCell = react_native_reanimated_1.useValue(0);\n  var cellTranslate = useNode_1.useNode(procs_1.setupCell(cellIndex, cellSize, cellOffset, isAfterActive, prevTrans, prevSpacerIndex, activeIndexAnim, activeCellSize, cellHoverOffset, spacerIndexAnim, config.toValue, state.position, state.time, state.finished, runSpring, onFinished, isDraggingCell, placeholderOffset, prevIsDraggingCell, clock, disabled));\n  react_native_reanimated_1.useCode(function () {\n    return react_native_reanimated_1.block([react_native_reanimated_1.onChange(cellTranslate, []), react_native_reanimated_1.onChange(prevTrans, []), react_native_reanimated_1.onChange(cellSize, []), react_native_reanimated_1.onChange(cellOffset, [])]);\n  }, []);\n  return state.position;\n}\n\nexports.useCellTranslate = useCellTranslate;","map":{"version":3,"sources":["/home/pagoto/Desktop/GITHUB/SipTender/node_modules/react-native-draggable-flatlist/lib/hooks/useCellTranslate.js"],"names":["Object","defineProperty","exports","value","useCellTranslate","react_native_reanimated_1","require","animatedValueContext_1","refContext_1","procs_1","useSpring_1","useNode_1","draggableFlatListContext_1","_a","cellIndex","cellSize","cellOffset","_b","useAnimatedValues","activeIndexAnim","activeCellSize","hoverAnim","scrollOffset","spacerIndexAnim","placeholderOffset","isDraggingCell","resetTouchedCell","disabled","animationConfigRef","useRefs","onDragEnd","useDraggableFlatListContext","cellSpring","useSpring","config","current","clock","state","isAfterActive","useValue","isClockRunning","useNode","clockRunning","runSpring","springFill","cellHoverOffset","add","onFinished","cond","stopClock","eq","call","prevTrans","prevSpacerIndex","prevIsDraggingCell","cellTranslate","setupCell","toValue","position","time","finished","useCode","block","onChange"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useCellTranslate = void 0;\nvar react_native_reanimated_1 = require(\"react-native-reanimated\");\nvar animatedValueContext_1 = require(\"../context/animatedValueContext\");\nvar refContext_1 = require(\"../context/refContext\");\nvar procs_1 = require(\"../procs\");\nvar useSpring_1 = require(\"./useSpring\");\nvar useNode_1 = require(\"../hooks/useNode\");\nvar draggableFlatListContext_1 = require(\"../context/draggableFlatListContext\");\nfunction useCellTranslate(_a) {\n    var cellIndex = _a.cellIndex, cellSize = _a.cellSize, cellOffset = _a.cellOffset;\n    var _b = animatedValueContext_1.useAnimatedValues(), activeIndexAnim = _b.activeIndexAnim, activeCellSize = _b.activeCellSize, hoverAnim = _b.hoverAnim, scrollOffset = _b.scrollOffset, spacerIndexAnim = _b.spacerIndexAnim, placeholderOffset = _b.placeholderOffset, isDraggingCell = _b.isDraggingCell, resetTouchedCell = _b.resetTouchedCell, disabled = _b.disabled;\n    var animationConfigRef = refContext_1.useRefs().animationConfigRef;\n    var onDragEnd = draggableFlatListContext_1.useDraggableFlatListContext().onDragEnd;\n    var cellSpring = useSpring_1.useSpring({ config: animationConfigRef.current });\n    var clock = cellSpring.clock, state = cellSpring.state, config = cellSpring.config;\n    var isAfterActive = react_native_reanimated_1.useValue(0);\n    var isClockRunning = useNode_1.useNode(react_native_reanimated_1.clockRunning(clock));\n    var runSpring = useNode_1.useNode(procs_1.springFill(clock, state, config));\n    // Even though this is the same value as hoverOffset passed via context\n    // the android context value lags behind the actual value on autoscroll\n    var cellHoverOffset = useNode_1.useNode(react_native_reanimated_1.add(hoverAnim, scrollOffset));\n    var onFinished = useNode_1.useNode(react_native_reanimated_1.cond(isClockRunning, [\n        react_native_reanimated_1.stopClock(clock),\n        react_native_reanimated_1.cond(react_native_reanimated_1.eq(cellIndex, activeIndexAnim), [\n            resetTouchedCell,\n            react_native_reanimated_1.call([activeIndexAnim, spacerIndexAnim], onDragEnd),\n        ]),\n    ]));\n    var prevTrans = react_native_reanimated_1.useValue(0);\n    var prevSpacerIndex = react_native_reanimated_1.useValue(-1);\n    var prevIsDraggingCell = react_native_reanimated_1.useValue(0);\n    var cellTranslate = useNode_1.useNode(procs_1.setupCell(cellIndex, cellSize, cellOffset, isAfterActive, prevTrans, prevSpacerIndex, activeIndexAnim, activeCellSize, cellHoverOffset, spacerIndexAnim, \n    //@ts-ignore\n    config.toValue, state.position, state.time, state.finished, runSpring, onFinished, isDraggingCell, placeholderOffset, prevIsDraggingCell, clock, disabled));\n    // This is a workaround required to continually evaluate values\n    react_native_reanimated_1.useCode(function () {\n        return react_native_reanimated_1.block([\n            react_native_reanimated_1.onChange(cellTranslate, []),\n            react_native_reanimated_1.onChange(prevTrans, []),\n            react_native_reanimated_1.onChange(cellSize, []),\n            react_native_reanimated_1.onChange(cellOffset, []),\n        ]);\n    }, []);\n    return state.position;\n}\nexports.useCellTranslate = useCellTranslate;\n"]},"metadata":{},"sourceType":"script"}